{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","i","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","isArray","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","shift","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","_processedApiHeaders","sendApiRequest","uri","cancelToken","getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","apiResponse","_apiHeaders","window","cmsLicenseKey","_resolveHeaderWaitlist","_apiHeaderWaitlist","_loadingApiHeaders","response","e","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","arr","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","key","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","obj","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","removeFromArray","index","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","char","asciiStr","asciiCharMap","randomString","result","random","preventOutlineOnMouseFocus","$elem","namespace","on","addClass","trigger","event","keyCode","SHIFT_KEY","CTRL_KEY","CMD_KEY","removeClass","createErrorList","errors","$ul","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","pill","formsubmit","menubtn","datetime","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","each","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","Pill","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","remove","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","$hud","$body","hide","switchSite","serialize","newSiteId","reloadForm","refreshInitialData","$allInstructions","$instructions","$label","siblings","requestAnimationFrame","headHtml","footHtml","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","shortcutManager","registerShortcut","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","first","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","data-icon","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","_deinitSources","_collapseSource","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","$scrollContainer","scrollTop","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","ADD_FX_DURATION","REMOVE_FX_DURATION","show","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","resume","showModal","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","allowDegreeFractions","isImagick","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","x","y","allowSavingAsNew","saveImage","$shade","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","_attachUploader","defaultFieldLayoutId","formData","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_canvasSupported","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","$innerProgressBar","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","validateDeleteInputs","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$notesTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","newSites","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","preview","previewToken","autosaveDrafts","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","mergeChanges","reload","expandSiteStatuses","$enabledForSiteField","site","siteStatuses","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","addlSiteOptions","addlSiteIds","serializedStatuses","$addlSiteSelectContainer","createSelect","$addlSiteSelect","_removeField","_updateSiteStatuses","$field","overflow","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","$lightswitch","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnsavedDraft","saveDraft","isActive","$spinners","saveDraftAction","prepareData","docTitle","draftName","draftNotes","revisionMenu","draftCreated","newHref","anchorPos","$actionButtonContainer","applyDraftAction","canDeleteDraft","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","currentTargets","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$deleteLink","saveMeta","onMetaHudHide","onMetaHudEscape","onNotesKeydown","shakeMetaHud","deleteDraft","deleteDraftAction","handleFormSubmit","abort","hashedRedirectUrl","enabledGlobally","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","focus","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","alt","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","ESC_KEY","$editBtn","data-action","initElement","Element","onTabOptionSelect","renameTab","removeTab","$prev","$next","$labelSpan","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","_onDrag","mouseDistX","_onDragStop","_onSettle","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","onToggleMouseDown","$targetBtn","$targetMenu","iframeLoaded","$tempInput","activeTarget","iframeHeight","_updateIframeProxy","$previewHeader","switchTarget","_useIframeResizer","previewIframeResizerOptions","resetScroll","refresh","sameHost","frameborder","iFrameResize","checkOrigin","scrolling","onInit","iframe","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","inputmode","maxlength","autofocus","getAutofocusValue","autocomplete","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","num","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            } else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            } else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            } else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Cancel'),\n                }).appendTo($buttonsContainer);\n                this.$saveBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                } else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (\n                this.hud.$body.serialize() !== this.initialData &&\n                !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))\n            ) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            } else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    } else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        closeHud: function() {\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav>ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            if ($source.length) {\n                this.selectSource($source);\n            }\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n                trashed: this.trashed ? 1 : 0,\n                drafts: this.drafts ? 1 : 0,\n            };\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (typeof action === 'string') {\n                action = this._findAction(action);\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            if (action.download) {\n                if (Craft.csrfTokenName) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n                Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                    this.setIndexAvailable();\n                }).catch(e => {\n                    this.setIndexAvailable();\n                });\n            } else {\n                Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    this.setIndexAvailable();\n                    if (response.data.success) {\n                        // Update the count text too\n                        this._resetCount();\n                        this._updateView(viewParams, response.data);\n\n                        if (response.data.message) {\n                            Craft.cp.displayNotice(response.data.message);\n                        }\n\n                        this.afterAction(action, params);\n                    } else {\n                        Craft.cp.displayError(response.data.message);\n                    }\n                }).catch(() => {\n                    this.setIndexAvailable();\n                });\n            }\n        },\n\n        _findAction: function(actionClass) {\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    return this.actions[i];\n                }\n            }\n            throw `Invalid element action: ${actionClass}`;\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                if (attr === 'score') {\n                    this.setSortDirection('desc');\n                } else {\n                    this.setSortDirection($option.data('default-dir') || 'asc');\n                }\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode');\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    let sourceViewMode = this.sourceViewModes[i];\n\n                    let $viewModeBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                        'data-view': sourceViewMode.mode,\n                        'data-icon': sourceViewMode.icon,\n                    }).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw 'View mode \"' + mode + '\" not supported.';\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            var selectNewSource = false;\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn menubtn',\n                    'data-icon': 'settings',\n                    title: Craft.t('app', 'Actions'),\n                }).appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<button/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                text: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n            this.$addElementBtn = this.getAddElementsBtn();\n\n            if (this.$addElementBtn && this.settings.limit == 1) {\n                this.$addElementBtn\n                    .css('position', 'absolute')\n                    .css('top', 0)\n                    .css(Craft.left, 0);\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            this._initialized = true;\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.children('.btn.add');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            if (this.$addElementBtn && !this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            if (this.$addElementBtn && this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.show();\n                    }\n                }\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, function() {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn disabled submit',\n                text: Craft.t('app', 'Select'),\n            }).appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n                allowDegreeFractions: Craft.isImagick\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn cancel',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$replaceBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save replace',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit save copy',\n                    text: Craft.t('app', 'Save as a new asset'),\n                }).appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n\n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: true\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    'data-icon': 'upload',\n                    style: 'position: relative; overflow: hidden;',\n                    text: Craft.t('app', 'Upload files'),\n                });\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n            this._attachUploader();\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn disabled',\n                text: Craft.t('app', 'Select transform'),\n            }).appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n                let $body = $('<div class=\"body\"/>').appendTo($form);\n                let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n                let $logoutBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Log out now'),\n                }).appendTo($buttons);\n                let $renewSessionBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Keep me logged in'),\n                }).appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Login'),\n                }).appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n            this.$edition = $('#edition');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if (this.$edition.hasClass('hot')) {\n                this.addListener(this.$edition, 'click', function() {\n                    document.location.href = Craft.getUrl('plugin-store/upgrade-craft');\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            if ($tab === this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            let href = $tab && $tab.attr('href');\n            if (href && href.charAt(0) === '#') {\n                let menubtn = $('#context-btn').menubtn().data('menubtn');\n                if (menubtn) {\n                    for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                        let a = menubtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New category'),\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit add icon',\n                text: Craft.t('app', 'New heading'),\n            }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            let $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod);\n            let $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user'),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            try {\n                if (this.settings.onSubmit() === false) {\n                    ev.preventDefault();\n                }\n            } catch (e) {\n                ev.preventDefault();\n                this.$deleteSpinner.addClass('hidden');\n                throw e;\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        enableAutosave: null,\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.enableAutosave = Craft.autosaveDrafts;\n\n            this.$revisionBtn = $('#context-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                if (this.enableAutosave) {\n                    this.checkForm();\n                }\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            if (Craft.autosaveDrafts) {\n                this.listenForChanges();\n            }\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<button/>', {\n                type: 'button',\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#context-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = true;\n                        }\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = false;\n                            let $statusIcons = this.statusIcons();\n                            if ($statusIcons.hasClass('checkmark-icon')) {\n                                $statusIcons.addClass('hidden');\n                            }\n                        }\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons()\n                    .velocity('stop')\n                    .css('opacity', '')\n                    .removeClass('invisible checkmark-icon alert-icon fade-out')\n                    .addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .velocity('stop')\n                            .css('opacity', '')\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Remove the \"Save as a Draft\" and \"Save\" buttons\n                        $('#save-draft-btn-container').remove();\n                        $('#save-btn-container').remove();\n\n                        let $actionButtonContainer = $('#action-buttons');\n\n                        // If they're allowed to update the source, add a \"Publish changes\" button\n                        if (this.settings.canUpdateSource) {\n                            $('<button/>', {\n                                type: 'button',\n                                class: 'btn secondary formsubmit',\n                                text: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).appendTo($actionButtonContainer).formsubmit();\n                        }\n\n                        // If autosaving is disabled, add a \"Save draft\" button\n                        if (!Craft.autosaveDrafts) {\n                            $('<button/>', {\n                                type: 'submit',\n                                class: 'btn submit',\n                                text: Craft.t('app', 'Save draft'),\n                            }).appendTo($actionButtonContainer);\n                        }\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (let oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += '&draftId=' + this.settings.draftId\n                    + '&draftName=' + encodeURIComponent(this.settings.draftName)\n                    + '&draftNotes=' + encodeURIComponent(this.settings.draftNotes || '');\n            }\n\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            let idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            let lb = encodeURIComponent('[');\n            let rb = encodeURIComponent(']');\n            // Keep replacing field IDs until data stops changing\n            while (true) {\n                if (data === (\n                    data = data\n                        // &fields[...][X]\n                        .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                            return pre + this.duplicatedElements[id] + post;\n                        })\n                        // &fields[...=X\n                        .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                            return pre + this.duplicatedElements[id];\n                        })\n                )) {\n                    break;\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            let $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            if (!this.enableAutosave) {\n                // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n                $statusIcons\n                    .velocity('stop')\n                    .velocity({\n                        opacity: 0,\n                    }, {\n                        delay: 2000,\n                        complete: () => {\n                            $statusIcons.addClass('hidden');\n                        },\n                    });\n            }\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // Is this a normal draft, and was this a normal save (either via submit button or save shortcut)?\n            if (this.settings.draftId && !this.settings.isUnsavedDraft && !ev.customTrigger) {\n                this.checkForm(true);\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Submit'),\n                }).appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New entry'),\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            // Normalize the value\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n            if (this.$icon.data('infoicon')) {\n                Garnish.log('Double-instantiating an info icon on an element');\n                this.$icon.data('infoicon').destroy();\n            }\n            this.$icon.data('infoicon', this);\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"]`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n\n            // Does the input have on/off labels?\n            let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n            if ($wrapper.length) {\n                this.addListener($wrapper.children('label[data-toggle=\"off\"]'), 'click', this.turnOff);\n                this.addListener($wrapper.children('label[data-toggle=\"on\"]'), 'click', this.turnOn);\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                let $saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: this._onDragStart.bind(this),\n                    onDrag: this._onDrag.bind(this),\n                    onDragStop: this._onDragStop.bind(this),\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', () => {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                });\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                target: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            });\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            });\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            });\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n                this.$previewContainer.hide();\n            });\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        _useIframeResizer: function() {\n            return Craft.previewIframeResizerOptions !== false;\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                target: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n                // Maintain the current scroll position?\n                let sameHost;\n                if (resetScroll) {\n                    this.scrollTop = null;\n                } else if (this.iframeLoaded && this.$iframe) {\n                    if (this._useIframeResizer()) {\n                        this.iframeHeight = this.$iframe.height();\n                        this.scrollTop = this.$iframeContainer.scrollTop();\n                    } else {\n                        sameHost = Craft.isSameHost(url);\n                        if (sameHost && this.$iframe[0].contentWindow) {\n                            this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                        }\n                    }\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (this._useIframeResizer()) {\n                    if (!resetScroll && this.iframeHeight !== null) {\n                        $iframe.height(this.iframeHeight);\n                        this.$iframeContainer.scrollTop(this.scrollTop);\n                    }\n\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                } else {\n                    $iframe.on('load', () => {\n                        this.iframeLoaded = true;\n                        if (!resetScroll && sameHost && this.scrollTop !== null) {\n                            $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                        }\n                    });\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    target: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            });\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || `copytext-${Math.floor(Math.random() * 1000000000)}`;\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $('<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-label` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            } else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            } else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            } else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Cancel'),\n                }).appendTo($buttonsContainer);\n                this.$saveBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                } else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (\n                this.hud.$body.serialize() !== this.initialData &&\n                !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))\n            ) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            } else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    } else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        closeHud: function() {\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav>ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            if ($source.length) {\n                this.selectSource($source);\n            }\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n                trashed: this.trashed ? 1 : 0,\n                drafts: this.drafts ? 1 : 0,\n            };\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (typeof action === 'string') {\n                action = this._findAction(action);\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            if (action.download) {\n                if (Craft.csrfTokenName) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n                Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                    this.setIndexAvailable();\n                }).catch(e => {\n                    this.setIndexAvailable();\n                });\n            } else {\n                Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    this.setIndexAvailable();\n                    if (response.data.success) {\n                        // Update the count text too\n                        this._resetCount();\n                        this._updateView(viewParams, response.data);\n\n                        if (response.data.message) {\n                            Craft.cp.displayNotice(response.data.message);\n                        }\n\n                        this.afterAction(action, params);\n                    } else {\n                        Craft.cp.displayError(response.data.message);\n                    }\n                }).catch(() => {\n                    this.setIndexAvailable();\n                });\n            }\n        },\n\n        _findAction: function(actionClass) {\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    return this.actions[i];\n                }\n            }\n            throw `Invalid element action: ${actionClass}`;\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                if (attr === 'score') {\n                    this.setSortDirection('desc');\n                } else {\n                    this.setSortDirection($option.data('default-dir') || 'asc');\n                }\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode');\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    let sourceViewMode = this.sourceViewModes[i];\n\n                    let $viewModeBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                        'data-view': sourceViewMode.mode,\n                        'data-icon': sourceViewMode.icon,\n                    }).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw 'View mode \"' + mode + '\" not supported.';\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            var selectNewSource = false;\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn menubtn',\n                    'data-icon': 'settings',\n                    title: Craft.t('app', 'Actions'),\n                }).appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<button/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                text: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n            this.$addElementBtn = this.getAddElementsBtn();\n\n            if (this.$addElementBtn && this.settings.limit == 1) {\n                this.$addElementBtn\n                    .css('position', 'absolute')\n                    .css('top', 0)\n                    .css(Craft.left, 0);\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            this._initialized = true;\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.children('.btn.add');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            if (this.$addElementBtn && !this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            if (this.$addElementBtn && this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.show();\n                    }\n                }\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, function() {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn disabled submit',\n                text: Craft.t('app', 'Select'),\n            }).appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n                allowDegreeFractions: Craft.isImagick\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn cancel',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$replaceBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save replace',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit save copy',\n                    text: Craft.t('app', 'Save as a new asset'),\n                }).appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n\n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: true\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    'data-icon': 'upload',\n                    style: 'position: relative; overflow: hidden;',\n                    text: Craft.t('app', 'Upload files'),\n                });\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n            this._attachUploader();\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn disabled',\n                text: Craft.t('app', 'Select transform'),\n            }).appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n                let $body = $('<div class=\"body\"/>').appendTo($form);\n                let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n                let $logoutBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Log out now'),\n                }).appendTo($buttons);\n                let $renewSessionBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Keep me logged in'),\n                }).appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Login'),\n                }).appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n            this.$edition = $('#edition');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if (this.$edition.hasClass('hot')) {\n                this.addListener(this.$edition, 'click', function() {\n                    document.location.href = Craft.getUrl('plugin-store/upgrade-craft');\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            if ($tab === this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            let href = $tab && $tab.attr('href');\n            if (href && href.charAt(0) === '#') {\n                let menubtn = $('#context-btn').menubtn().data('menubtn');\n                if (menubtn) {\n                    for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                        let a = menubtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New category'),\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit add icon',\n                text: Craft.t('app', 'New heading'),\n            }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            let $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod);\n            let $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user'),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            try {\n                if (this.settings.onSubmit() === false) {\n                    ev.preventDefault();\n                }\n            } catch (e) {\n                ev.preventDefault();\n                this.$deleteSpinner.addClass('hidden');\n                throw e;\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        enableAutosave: null,\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.enableAutosave = Craft.autosaveDrafts;\n\n            this.$revisionBtn = $('#context-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                if (this.enableAutosave) {\n                    this.checkForm();\n                }\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            if (Craft.autosaveDrafts) {\n                this.listenForChanges();\n            }\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<button/>', {\n                type: 'button',\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#context-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = true;\n                        }\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = false;\n                            let $statusIcons = this.statusIcons();\n                            if ($statusIcons.hasClass('checkmark-icon')) {\n                                $statusIcons.addClass('hidden');\n                            }\n                        }\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons()\n                    .velocity('stop')\n                    .css('opacity', '')\n                    .removeClass('invisible checkmark-icon alert-icon fade-out')\n                    .addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .velocity('stop')\n                            .css('opacity', '')\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Remove the \"Save as a Draft\" and \"Save\" buttons\n                        $('#save-draft-btn-container').remove();\n                        $('#save-btn-container').remove();\n\n                        let $actionButtonContainer = $('#action-buttons');\n\n                        // If they're allowed to update the source, add a \"Publish changes\" button\n                        if (this.settings.canUpdateSource) {\n                            $('<button/>', {\n                                type: 'button',\n                                class: 'btn secondary formsubmit',\n                                text: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).appendTo($actionButtonContainer).formsubmit();\n                        }\n\n                        // If autosaving is disabled, add a \"Save draft\" button\n                        if (!Craft.autosaveDrafts) {\n                            $('<button/>', {\n                                type: 'submit',\n                                class: 'btn submit',\n                                text: Craft.t('app', 'Save draft'),\n                            }).appendTo($actionButtonContainer);\n                        }\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (let oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += '&draftId=' + this.settings.draftId\n                    + '&draftName=' + encodeURIComponent(this.settings.draftName)\n                    + '&draftNotes=' + encodeURIComponent(this.settings.draftNotes || '');\n            }\n\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            let idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            let lb = encodeURIComponent('[');\n            let rb = encodeURIComponent(']');\n            // Keep replacing field IDs until data stops changing\n            while (true) {\n                if (data === (\n                    data = data\n                        // &fields[...][X]\n                        .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                            return pre + this.duplicatedElements[id] + post;\n                        })\n                        // &fields[...=X\n                        .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                            return pre + this.duplicatedElements[id];\n                        })\n                )) {\n                    break;\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            let $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            if (!this.enableAutosave) {\n                // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n                $statusIcons\n                    .velocity('stop')\n                    .velocity({\n                        opacity: 0,\n                    }, {\n                        delay: 2000,\n                        complete: () => {\n                            $statusIcons.addClass('hidden');\n                        },\n                    });\n            }\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // Is this a normal draft, and was this a normal save (either via submit button or save shortcut)?\n            if (this.settings.draftId && !this.settings.isUnsavedDraft && !ev.customTrigger) {\n                this.checkForm(true);\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Submit'),\n                }).appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New entry'),\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            // Normalize the value\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n            if (this.$icon.data('infoicon')) {\n                Garnish.log('Double-instantiating an info icon on an element');\n                this.$icon.data('infoicon').destroy();\n            }\n            this.$icon.data('infoicon', this);\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"]`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n\n            // Does the input have on/off labels?\n            let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n            if ($wrapper.length) {\n                this.addListener($wrapper.children('label[data-toggle=\"off\"]'), 'click', this.turnOff);\n                this.addListener($wrapper.children('label[data-toggle=\"on\"]'), 'click', this.turnOn);\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                let $saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: this._onDragStart.bind(this),\n                    onDrag: this._onDrag.bind(this),\n                    onDragStop: this._onDragStop.bind(this),\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', () => {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                });\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                target: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            });\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            });\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            });\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n                this.$previewContainer.hide();\n            });\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        _useIframeResizer: function() {\n            return Craft.previewIframeResizerOptions !== false;\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                target: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n                // Maintain the current scroll position?\n                let sameHost;\n                if (resetScroll) {\n                    this.scrollTop = null;\n                } else if (this.iframeLoaded && this.$iframe) {\n                    if (this._useIframeResizer()) {\n                        this.iframeHeight = this.$iframe.height();\n                        this.scrollTop = this.$iframeContainer.scrollTop();\n                    } else {\n                        sameHost = Craft.isSameHost(url);\n                        if (sameHost && this.$iframe[0].contentWindow) {\n                            this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                        }\n                    }\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (this._useIframeResizer()) {\n                    if (!resetScroll && this.iframeHeight !== null) {\n                        $iframe.height(this.iframeHeight);\n                        this.$iframeContainer.scrollTop(this.scrollTop);\n                    }\n\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                } else {\n                    $iframe.on('load', () => {\n                        this.iframeLoaded = true;\n                        if (!resetScroll && sameHost && this.scrollTop !== null) {\n                            $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                        }\n                    });\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    target: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            });\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || `copytext-${Math.floor(Math.random() * 1000000000)}`;\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $('<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-label` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n"]}